<?php
namespace Codeception\Command;

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Yaml\Yaml;
use \Symfony\Component\Console\Helper\DialogHelper;

class Build extends Base
{

	protected $template = <<<EOF
<?php
// This class was automatically generated by build task
// You can change it manually, but it will be overwritten on next build

/**
%s
**/


%s %s extends %s
{


}


EOF;
    
    public function getDescription() {
        return 'Generates base classes for all suites';
    }

    protected function configure()
    {
        $this->setDefinition(array(
            new \Symfony\Component\Console\Input\InputOption('silent', '', InputOption::VALUE_NONE, 'Don\'t ask for rebuild')
        ));
        parent::configure();
    }

	protected function execute(InputInterface $input, OutputInterface $output)
	{
        $this->initCodeception();
        foreach ($this->suites as $suite => $settings) {

            \Codeception\SuiteManager::init($settings);

            $phpdoc = array();
            $methodCounter = 0;

            foreach (\Codeception\SuiteManager::$modules as $modulename => $module) {
                $class = new \ReflectionClass($modulename);
                $methods = $class->getMethods();
                $phpdoc[] = '';
                $phpdoc[] = 'Methods from ' . $modulename;
                foreach ($methods as $method) {
                    if (strpos($method->name, '_') === 0) continue;
                    if (!$method->isPublic()) continue;
                    $params = array();
                    foreach ($method->getParameters() as $param) {
                        if ($param->isOptional()) continue;
                        $params[] = '$' . $param->name;
                    }

                    $params = implode(', ', $params);
                    $phpdoc[] = '@method void ' . $method->name . '(' . $params . ')';
                    $methodCounter++;
                }
            }
            $contents = sprintf($this->template, implode("\r\n * ", $phpdoc), 'class',$settings['class_name'], '\Codeception\AbstractGuy');

            file_put_contents($file = $this->tests_path.'/'.$suite.'/'.$settings['class_name'].'.php', $contents);
            $output->writeln("$file generated sucessfully. $methodCounter methods added");
        }
    }
}
