<?php  //[STAMP] fdb096e85cdc7148e4fbae1224749bf1
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

trait RetryTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Helper\Retry::failAt()
     */
    public function failAt($amount = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('failAt', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes failAt and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Helper\Retry::failAt()
     */
    public function retryFailAt($amount = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('failAt', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Helper\Retry::failFor()
     */
    public function failFor($sec = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('failFor', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes failFor and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Helper\Retry::failFor()
     */
    public function retryFailFor($sec = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('failFor', func_get_args(), $retryNum, $retryInterval));
    }
}
